{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","hooks/use-input.js","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuotes.jsx"],"names":["module","exports","useInput","validateInput","useState","enteredValue","setEnterValue","isBlur","setIsBlur","isValid","onChangeHandler","event","target","value","onBlurHandler","hasError","resetInput","Card","props","className","classes","card","children","isNotEmpty","trim","QuoteForm","enteredAuthor","authorChangeHandler","authorBlurHandler","isAuthorValid","isAuthorError","enteredText","textChangeHandler","textBlurHandler","isTextValid","isTextError","isEntering","setIsEntering","formIsValid","when","message","onFocus","form","onSubmit","preventDefault","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","err","onBlur","onChange","type","id","error","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,IAAM,uBAAuB,QAAU,2BAA2B,MAAQ,2B,iEC0BtLC,EAzBE,SAACC,GACjB,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAMMC,EAAUN,EAAcE,GAO9B,MAAO,CACNA,eACAK,gBAbuB,SAACC,GAAD,OAAWL,EAAcK,EAAMC,OAAOC,QAc7DC,cAZqB,SAACH,GAAD,OAAWH,GAAU,IAa1CC,UACAM,UAXiBN,GAAWF,EAY5BS,WAXkB,WAClBV,EAAc,IACdE,GAAU,M,wBCRGS,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCIxCC,EAAa,SAACV,GAAD,MAA4B,KAAjBA,EAAMW,QAyFrBC,EAvFG,SAACP,GAClB,MAMIhB,EAASqB,GALEG,EADf,EACCrB,aACiBsB,EAFlB,EAECjB,gBACekB,EAHhB,EAGCd,cACSe,EAJV,EAICpB,QACUqB,EALX,EAKCf,SAGD,EAMIb,EAASqB,GALEQ,EADf,EACC1B,aACiB2B,EAFlB,EAECtB,gBACeuB,EAHhB,EAGCnB,cACSoB,EAJV,EAICzB,QACU0B,EALX,EAKCpB,SAGD,EAAoCX,oBAAS,GAA7C,mBAAOgC,EAAP,KAAmBC,EAAnB,KAEMC,EAAcT,GAAiBK,EAerC,OACC,eAAC,WAAD,WACC,cAAC,IAAD,CACCK,KAAMH,EACNI,QAAQ,qDAET,cAAC,EAAD,UACC,uBACCC,QAVqB,kBAAMJ,GAAc,IAWzClB,UAAWC,IAAQsB,KACnBC,SAvBJ,SAA2BhC,GAC1BA,EAAMiC,iBAGDN,GAGLpB,EAAM2B,WAAW,CAAEC,OAAQpB,EAAeqB,KAAMhB,KAa9C,UAIEb,EAAM8B,WACN,qBAAK7B,UAAWC,IAAQ6B,QAAxB,SACC,cAACC,EAAA,EAAD,MAIF,sBAAK/B,UAAWC,IAAQ+B,QAAxB,UACC,uBAAOC,QAAQ,SAAf,oBACA,uBACCjC,UAAWW,EAAgBV,IAAQiC,IAAM,GACzCxC,MAAOa,EACP4B,OAAQ1B,EACR2B,SAAU5B,EACV6B,KAAK,OACLC,GAAG,WAEH3B,GACA,mBAAGX,UAAWC,IAAQsC,MAAtB,kCAGF,sBAAKvC,UAAWC,IAAQ+B,QAAxB,UACC,uBAAOC,QAAQ,OAAf,kBACA,0BACCjC,UAAWgB,EAAcf,IAAQiC,IAAM,GACvCI,GAAG,OACHE,KAAK,IACL9C,MAAOkB,EACPwB,SAAUvB,EACVsB,OAAQrB,IACRE,GAAe,mBAAGhB,UAAWC,IAAQsC,MAAtB,gCAEjB,qBAAKvC,UAAWC,IAAQwC,QAAxB,SACC,wBAAQC,QA9CiB,kBAAMxB,GAAc,IA8CLlB,UAAU,MAAlD,kC,gBCtDS2C,UAzBE,SAAC5C,GACjB,IAAM6C,EAAUC,cAChB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAErBC,qBAAU,WACM,cAAXD,GACHL,EAAQO,KAAK,aAEZ,CAACF,EAAQL,IAMZ,MAAe,YAAXK,EAEF,qBAAKjD,UAAU,WAAf,SACC,cAAC+B,EAAA,EAAD,MAKI,cAAC,EAAD,CAAWL,WAZM,SAAC0B,GACxBJ,EAAYI","file":"static/js/6.6423ab95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__XOqDi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__N6uCp\",\"loading\":\"QuoteForm_loading__3Hzc7\",\"control\":\"QuoteForm_control__3IQep\",\"err\":\"QuoteForm_err__3nyU8\",\"actions\":\"QuoteForm_actions__2Leo8\",\"error\":\"QuoteForm_error__36d07\"};","import { useState } from 'react';\r\n\r\nconst useInput = (validateInput) => {\r\n\tconst [enteredValue, setEnterValue] = useState('');\r\n\tconst [isBlur, setIsBlur] = useState(false);\r\n\r\n\tconst onChangeHandler = (event) => setEnterValue(event.target.value);\r\n\r\n\tconst onBlurHandler = (event) => setIsBlur(true);\r\n\r\n\tconst isValid = validateInput(enteredValue);\r\n\tconst hasError = !isValid && isBlur;\r\n\tconst resetInput = () => {\r\n\t\tsetEnterValue('');\r\n\t\tsetIsBlur(false);\r\n\t};\r\n\r\n\treturn {\r\n\t\tenteredValue,\r\n\t\tonChangeHandler,\r\n\t\tonBlurHandler,\r\n\t\tisValid,\r\n\t\thasError,\r\n\t\tresetInput,\r\n\t};\r\n};\r\n\r\nexport default useInput;\r\n","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import useInput from '../../hooks/use-input';\r\nimport { Prompt } from 'react-router-dom';\r\nimport Card from '../UI/Card';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport classes from './QuoteForm.module.css';\r\nimport { Fragment, useState } from 'react';\r\n\r\nconst isNotEmpty = (value) => value.trim() !== '';\r\n\r\nconst QuoteForm = (props) => {\r\n\tconst {\r\n\t\tenteredValue: enteredAuthor,\r\n\t\tonChangeHandler: authorChangeHandler,\r\n\t\tonBlurHandler: authorBlurHandler,\r\n\t\tisValid: isAuthorValid,\r\n\t\thasError: isAuthorError,\r\n\t} = useInput(isNotEmpty);\r\n\r\n\tconst {\r\n\t\tenteredValue: enteredText,\r\n\t\tonChangeHandler: textChangeHandler,\r\n\t\tonBlurHandler: textBlurHandler,\r\n\t\tisValid: isTextValid,\r\n\t\thasError: isTextError,\r\n\t} = useInput(isNotEmpty);\r\n\r\n\tconst [isEntering, setIsEntering] = useState(false);\r\n\r\n\tconst formIsValid = isAuthorValid && isTextValid;\r\n\r\n\tfunction submitFormHandler(event) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// optional: Could validate here\r\n\t\tif (!formIsValid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tprops.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n\t}\r\n\r\n\tconst submitClickBtnHandler = () => setIsEntering(false);\r\n\tconst focusFormHandler = () => setIsEntering(true);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Prompt\r\n\t\t\t\twhen={isEntering}\r\n\t\t\t\tmessage='Do you sure want to leave. All Data will be lost'\r\n\t\t\t/>\r\n\t\t\t<Card>\r\n\t\t\t\t<form\r\n\t\t\t\t\tonFocus={focusFormHandler}\r\n\t\t\t\t\tclassName={classes.form}\r\n\t\t\t\t\tonSubmit={submitFormHandler}>\r\n\t\t\t\t\t{props.isLoading && (\r\n\t\t\t\t\t\t<div className={classes.loading}>\r\n\t\t\t\t\t\t\t<LoadingSpinner />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<div className={classes.control}>\r\n\t\t\t\t\t\t<label htmlFor='author'>Author</label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclassName={isAuthorError ? classes.err : ''}\r\n\t\t\t\t\t\t\tvalue={enteredAuthor}\r\n\t\t\t\t\t\t\tonBlur={authorBlurHandler}\r\n\t\t\t\t\t\t\tonChange={authorChangeHandler}\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tid='author'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{isAuthorError && (\r\n\t\t\t\t\t\t\t<p className={classes.error}>Need valid author</p>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={classes.control}>\r\n\t\t\t\t\t\t<label htmlFor='text'>Text</label>\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tclassName={isTextError ? classes.err : ''}\r\n\t\t\t\t\t\t\tid='text'\r\n\t\t\t\t\t\t\trows='5'\r\n\t\t\t\t\t\t\tvalue={enteredText}\r\n\t\t\t\t\t\t\tonChange={textChangeHandler}\r\n\t\t\t\t\t\t\tonBlur={textBlurHandler}></textarea>\r\n\t\t\t\t\t\t{isTextError && <p className={classes.error}>Need valid Text</p>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={classes.actions}>\r\n\t\t\t\t\t\t<button onClick={submitClickBtnHandler} className='btn'>\r\n\t\t\t\t\t\t\tAdd Quote\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</Card>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default QuoteForm;\r\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = (props) => {\r\n\tconst history = useHistory();\r\n\tconst { sendRequest, status } = useHttp(addQuote);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (status === 'completed') {\r\n\t\t\thistory.push('/quotes');\r\n\t\t}\r\n\t}, [status, history]);\r\n\r\n\tconst addQuoteHandler = (quoteData) => {\r\n\t\tsendRequest(quoteData);\r\n\t};\r\n\r\n\tif (status === 'pending') {\r\n\t\treturn (\r\n\t\t\t<div className='centered'>\r\n\t\t\t\t<LoadingSpinner />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn <QuoteForm onAddQuote={addQuoteHandler} />;\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}